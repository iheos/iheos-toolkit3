package gov.nist.hit.ds.wsseTool.parsing;

import java.security.KeyStoreException;

import gov.nist.hit.ds.wsseTool.api.WsseHeaderGenerator;
import gov.nist.hit.ds.wsseTool.api.config.Context;
import gov.nist.hit.ds.wsseTool.api.config.ContextFactory;
import gov.nist.hit.ds.wsseTool.api.config.KeystoreAccess;
import gov.nist.hit.ds.wsseTool.api.exceptions.GenerationException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

public class MessageFactory {

	private static final Logger log = LoggerFactory.getLogger(MessageFactory.class);
	
	private static Message testMessage;
	
	/**
	 * Call this method to obtain a message with a header generated by the module itself. Used
	 * for testing only.
	 * 
	 * @return a message build by the tool.
	 */
	public static Message getTestMessage() {

		if (testMessage != null) {
			return testMessage;
		}

		else {
			return testMessage = initTestMessage();
		}
	}

	public static Message getMessage(Element wsseHeader, Context context)
			throws ParseException {
		validateContext(context);
		Message message = buildMessage(wsseHeader, context);
		parse(message);
		return message;
	}
	
	

	private static void validateContext(Context context) throws ParseException {
		if (context == null)
			throw new ParseException("No context found.");
		if (context.getParams().get("homeCommunityId") == null) {
			log.warn("no homeCommunityId found in context. Some validations will not be performed.");
		}
		if (context.getParams().get("To") == null) {
			log.warn("no ws-addressing \"To\" info found in context. Some validations will not be performed.");
		}
	}

	private static Message buildMessage(Element wsseHeader, Context context)
			throws ParseException {
		Message message = new Message(wsseHeader, context);

		try {
			// add gpath and opensaml representation to the context
			message.setGroovyHeader(MessageParser.parseToGPath(wsseHeader));
			message.setOpensamlHeader(MessageParser.parseToOpenSaml(wsseHeader));
		} catch (Exception e) {
			throw new ParseException("an error occured during parsing.", e);
		}
		return message;
	}

	private static void parse(Message message) throws ParseException {
		new WSSEHeaderParser(message).parse();
	}


	private static Message initTestMessage() {
		Document doc = null;

		String store = "src/test/resources/keystore/keystore";
		String sPass = "changeit";
		String kPass = "changeit";
		String alias = "hit-testing.nist.gov";
		Context context = ContextFactory.getInstance();
		try {
			context.setKeystore(new KeystoreAccess(store, sPass, alias, kPass));
		} catch (KeyStoreException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		context.getParams().put("patientId", "D123401^^^&1.1&ISO");
		try {
			doc = new WsseHeaderGenerator().generateWsseHeader(context);
		} catch (GenerationException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		Message message = null;

		try {
			message = MessageFactory.getMessage(doc.getDocumentElement(),
					context);
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return message;
	}



}
